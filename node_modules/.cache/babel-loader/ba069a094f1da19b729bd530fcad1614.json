{"ast":null,"code":"import _classCallCheck from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/elena/Documents/GA/REACT/star-db/src/components/random-planet/random-planet.js\";\nimport React, { Component } from 'react';\nimport SwapiService from \"../../services/swapi-service\";\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport './random-planet.css';\n\nvar RandomPlanet =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RandomPlanet, _Component);\n\n  function RandomPlanet() {\n    var _this;\n\n    _classCallCheck(this, RandomPlanet);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RandomPlanet).call(this));\n    _this.swapiService = new SwapiService();\n\n    _this.onPlanetLoaded = function (planet) {\n      _this.setState({\n        planet: planet,\n        loading: false\n      });\n    };\n\n    _this.onError = function (err) {\n      _this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    _this.updatePlanet = function () {\n      console.log('update');\n      var id = Math.floor(Math.random() * 25) + 2;\n\n      _this.swapiService.getPlanet(id).then(_this.onPlanetLoaded).catch(_this.onError);\n    };\n\n    console.log('constructor');\n    _this.state = {\n      planet: {},\n      loading: true,\n      error: false\n    }; // this.updatePlanet();\n\n    var interval = setInterval(_this.updatePlanet, 5000);\n    return _this;\n  }\n\n  _createClass(RandomPlanet, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"component Did mount\");\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"clearInterval\");\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('Render');\n      var _this$state = this.state,\n          planet = _this$state.planet,\n          loading = _this$state.loading,\n          error = _this$state.error;\n      var errorMessage = error ? React.createElement(ErrorIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }) : null;\n      var spinner = loading ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }) : null;\n      var content = !(loading || error) ? React.createElement(PlanetView, {\n        planet: planet,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }) : null; // if (loading) {\n      //   return <Spinner />\n      // }\n\n      return React.createElement(\"div\", {\n        className: \"random-planet jumbotron rounded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, errorMessage, spinner, content);\n    }\n  }]);\n\n  return RandomPlanet;\n}(Component);\n\n;\n\nvar PlanetView = function PlanetView(_ref) {\n  var planet = _ref.planet;\n  var id = planet.id,\n      name = planet.name,\n      population = planet.population,\n      rotationPeriod = planet.rotationPeriod,\n      diameter = planet.diameter;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"planet-image\",\n    src: \"http://starwars-visualguide.com/assets/img/planets/\".concat(id, \".jpg\"),\n    alt: \"Image of \".concat(name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    className: \"list-group list-group-flush\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Population\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, population)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Rotation Period\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, rotationPeriod)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Diameter\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, diameter)))));\n};\n\nexport default RandomPlanet;","map":{"version":3,"sources":["/Users/elena/Documents/GA/REACT/star-db/src/components/random-planet/random-planet.js"],"names":["React","Component","SwapiService","Spinner","ErrorIndicator","RandomPlanet","swapiService","onPlanetLoaded","planet","setState","loading","onError","err","error","updatePlanet","console","log","id","Math","floor","random","getPlanet","then","catch","state","interval","setInterval","clearInterval","errorMessage","spinner","content","PlanetView","name","population","rotationPeriod","diameter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SwapiService from \"../../services/swapi-service\";\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport './random-planet.css';\nclass  RandomPlanet extends Component {\n  swapiService = new SwapiService();\n  constructor(){\n    super();\n    console.log('constructor');\n    this.state = {\n      planet: {},\n      loading: true,\n      error: false\n    };\n    // this.updatePlanet();\n    const interval = setInterval(this.updatePlanet, 5000);\n\n  }\n  componentDidMount() {\n    console.log(\"component Did mount\");\n  }\n  componentWillUnmount() {\n    console.log(\"clearInterval\");\n    clearInterval(this.interval);\n\n  }\n  onPlanetLoaded = (planet) => {\n    this.setState({planet,\n                  loading: false});\n  }\n  onError = (err) => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  };\n  updatePlanet = () => {\n    console.log('update');\n    const id =Math.floor(Math.random()*25)+2;\n    this.swapiService.getPlanet(id)\n    .then(this.onPlanetLoaded)\n    .catch(this.onError);\n\n\n  }\n  render(){\n    console.log('Render');\n    const { planet, loading, error } = this.state;\n    const errorMessage = error? <ErrorIndicator /> : null;\n    const spinner = loading? <Spinner /> : null;\n    const content = !(loading || error) ? <PlanetView planet={ planet } /> : null;\n    // if (loading) {\n    //   return <Spinner />\n    // }\n\n    return(\n      <div className=\"random-planet jumbotron rounded\">\n      { errorMessage }\n      { spinner }\n      { content }\n      </div>\n\n    );\n  }\n\n};\nconst PlanetView =({ planet }) => {\n  const {id, name, population, rotationPeriod, diameter} = planet;\n  return(\n    <React.Fragment>\n    <img className=\"planet-image\" src={`http://starwars-visualguide.com/assets/img/planets/${id}.jpg` } alt={`Image of ${name}`} />\n    <div>\n      <h4>{ name }</h4>\n      <ul className=\"list-group list-group-flush\">\n      <li className=\"list-group-item\">\n        <span className=\"term\">Population</span>\n        <span>{ population }</span>\n      </li>\n\n        <li className=\"list-group-item\">\n          <span className=\"term\">Rotation Period</span>\n          <span>{ rotationPeriod }</span>\n        </li>\n\n        <li className=\"list-group-item\">\n          <span className=\"term\">Diameter</span>\n          <span>{ diameter }</span>\n        </li>\n        </ul>\n    </div>\n    </React.Fragment>\n  );\n};\nexport default RandomPlanet;\n"]},"metadata":{},"sourceType":"module"}