{"ast":null,"code":"import _classCallCheck from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/elena/Documents/GA/REACT/star-db/src/components/random-planet/random-planet.js\";\nimport React, { Component } from 'react';\nimport SwapiService from \"../../services/swapi-service\";\nimport Spinner from '../spinner';\nimport './random-planet.css';\n\nvar RandomPlanet =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RandomPlanet, _Component);\n\n  function RandomPlanet() {\n    var _this;\n\n    _classCallCheck(this, RandomPlanet);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RandomPlanet).call(this));\n    _this.swapiService = new SwapiService();\n\n    _this.onPlanetLoaded = function (planet) {\n      _this.setState({\n        planet: planet,\n        loading: false\n      });\n    };\n\n    _this.state = {\n      planet: {},\n      loading: true\n    };\n\n    _this.updatePlanet();\n\n    return _this;\n  }\n\n  _createClass(RandomPlanet, [{\n    key: \"updatePlanet\",\n    value: function updatePlanet() {\n      var id = Math.floor(Math.random() * 25) + 2;\n      this.swapiService.getPlanet(id).then(this.onPlanetLoaded);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          planet = _this$state.planet,\n          loading = _this$state.loading;\n\n      if (loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"random-planet jumbotron rounded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(PlanetView, {\n        planet: planet,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return RandomPlanet;\n}(Component);\n\n;\n\nvar PlanetView = function PlanetView(_ref) {\n  var planet = _ref.planet;\n  var id = planet.id,\n      name = planet.name,\n      population = planet.population,\n      rotationPeriod = planet.rotationPeriod,\n      diameter = planet.diameter;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"planet-image\",\n    src: \"http://starwars-visualguide.com/assets/img/planets/\".concat(id, \".jpg\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    className: \"list-group list-group-flush\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Population\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, population)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Rotation Period\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, rotationPeriod)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Diameter\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, diameter)))));\n};\n\nexport default RandomPlanet;","map":{"version":3,"sources":["/Users/elena/Documents/GA/REACT/star-db/src/components/random-planet/random-planet.js"],"names":["React","Component","SwapiService","Spinner","RandomPlanet","swapiService","onPlanetLoaded","planet","setState","loading","state","updatePlanet","id","Math","floor","random","getPlanet","then","PlanetView","name","population","rotationPeriod","diameter"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAO,qBAAP;;IACOC,Y;;;;;AAEL,0BAAa;AAAA;;AAAA;;AACX;AADW,UADbC,YACa,GADE,IAAIH,YAAJ,EACF;;AAAA,UAQbI,cARa,GAQI,UAACC,MAAD,EAAY;AAC3B,YAAKC,QAAL,CAAc;AAACD,QAAAA,MAAM,EAANA,MAAD;AACAE,QAAAA,OAAO,EAAE;AADT,OAAd;AAED,KAXY;;AAEX,UAAKC,KAAL,GAAa;AACXH,MAAAA,MAAM,EAAE,EADG;AAEXE,MAAAA,OAAO,EAAE;AAFE,KAAb;;AAIA,UAAKE,YAAL;;AANW;AAOZ;;;;mCAKc;AACb,UAAMC,EAAE,GAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,IAA6B,CAAvC;AACA,WAAKV,YAAL,CAAkBW,SAAlB,CAA4BJ,EAA5B,EAAgCK,IAAhC,CAAqC,KAAKX,cAA1C;AAGD;;;6BACO;AAAA,wBACsB,KAAKI,KAD3B;AAAA,UACEH,MADF,eACEA,MADF;AAAA,UACUE,OADV,eACUA,OADV;;AAEN,UAAIA,OAAJ,EAAa;AACX,eAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,aACE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,UAAD;AAAY,QAAA,MAAM,EAAGF,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADF;AAOD;;;;EAjCyBN,S;;AAmC3B;;AACD,IAAMiB,UAAU,GAAE,SAAZA,UAAY,OAAgB;AAAA,MAAbX,MAAa,QAAbA,MAAa;AAAA,MACzBK,EADyB,GACyBL,MADzB,CACzBK,EADyB;AAAA,MACrBO,IADqB,GACyBZ,MADzB,CACrBY,IADqB;AAAA,MACfC,UADe,GACyBb,MADzB,CACfa,UADe;AAAA,MACHC,cADG,GACyBd,MADzB,CACHc,cADG;AAAA,MACaC,QADb,GACyBf,MADzB,CACae,QADb;AAEhC,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,GAAG,+DAAwDV,EAAxD,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMO,IAAN,CADF,EAEE;AAAI,IAAA,SAAS,EAAC,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQC,UAAR,CAFF,CADA,EAME;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQC,cAAR,CAFF,CANF,EAWE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQC,QAAR,CAFF,CAXF,CAFF,CAFA,CADF;AAyBD,CA3BD;;AA4BA,eAAelB,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport SwapiService from \"../../services/swapi-service\"\nimport Spinner from '../spinner';\nimport './random-planet.css';\nclass  RandomPlanet extends Component {\n  swapiService = new SwapiService();\n  constructor(){\n    super();\n    this.state = {\n      planet: {},\n      loading: true\n    };\n    this.updatePlanet();\n  }\n  onPlanetLoaded = (planet) => {\n    this.setState({planet,\n                  loading: false});\n  }\n  updatePlanet() {\n    const id =Math.floor(Math.random()*25)+2;\n    this.swapiService.getPlanet(id).then(this.onPlanetLoaded);\n\n\n  }\n  render(){\n    const { planet, loading } = this.state;\n    if (loading) {\n      return <Spinner />\n    }\n\n    return(\n      <div className=\"random-planet jumbotron rounded\">\n      <PlanetView planet={ planet } />\n\n      </div>\n\n    );\n  }\n\n};\nconst PlanetView =({ planet }) => {\n  const {id, name, population, rotationPeriod, diameter} = planet;\n  return(\n    <React.Fragment>\n    <img className=\"planet-image\" src={`http://starwars-visualguide.com/assets/img/planets/${id}.jpg`} />\n    <div>\n      <h4>{ name }</h4>\n      <ul className=\"list-group list-group-flush\">\n      <li className=\"list-group-item\">\n        <span className=\"term\">Population</span>\n        <span>{ population }</span>\n      </li>\n\n        <li className=\"list-group-item\">\n          <span className=\"term\">Rotation Period</span>\n          <span>{ rotationPeriod }</span>\n        </li>\n\n        <li className=\"list-group-item\">\n          <span className=\"term\">Diameter</span>\n          <span>{ diameter }</span>\n        </li>\n        </ul>\n    </div>\n    </React.Fragment>\n  );\n\n};\nexport default RandomPlanet;\n"]},"metadata":{},"sourceType":"module"}