{"ast":null,"code":"import _regeneratorRuntime from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar SwapiService =\n/*#__PURE__*/\nfunction () {\n  function SwapiService() {\n    var _this = this;\n\n    _classCallCheck(this, SwapiService);\n\n    this._apiBase = 'https://swapi.co/api';\n    this.getAllPeople =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getResource(\"/people/\");\n\n            case 2:\n              res = _context.sent;\n              return _context.abrupt(\"return\", res.results.map(_this._transformPerson));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    this.getPerson =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        var person;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.getResource(\"/people/\".concat(id, \"/\"));\n\n              case 2:\n                person = _context2.sent;\n                return _context2.abrupt(\"return\", _this._transformPerson(person));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this.getAllPlanets =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this.getResource(\"/planets/\");\n\n            case 2:\n              res = _context3.sent;\n              return _context3.abrupt(\"return\", res.results.map(_this._transformPlanet));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    this.getPlanet =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id) {\n        var planet;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this.getResource(\"/planets/\".concat(id, \"/\"));\n\n              case 2:\n                planet = _context4.sent;\n                return _context4.abrupt(\"return\", _this._transformPlanet(planet));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    this.getAllStarShip =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _this.getResource(\"/starships/\");\n\n            case 2:\n              res = _context5.sent;\n              return _context5.abrupt(\"return\", res.results);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    this.getStarShip =\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(id) {\n        var starShip;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _this.getResource(\"/starships/\".concat(id, \"/\"));\n\n              case 2:\n                starShip = _context6.sent;\n                return _context6.abrupt(\"return\", _this._transformStarShip(starShip));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    this._transformPlanet = function (planet) {\n      return {\n        id: _this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n\n    this._transformPerson = function (person) {\n      return {\n        id: _this._extractId(person),\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birth_year,\n        eyeColor: person.eye_color\n      };\n    };\n\n    this._transformStarShip = function (starship) {\n      return {\n        id: _this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.cost_in_credits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargo_capacity\n      };\n    };\n  }\n\n  _createClass(SwapiService, [{\n    key: \"getResource\",\n    value: function () {\n      var _getResource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(url) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return fetch(\"\".concat(this._apiBase).concat(url));\n\n              case 2:\n                res = _context7.sent;\n\n                if (res.ok) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Could not fetch \".concat(url) + \", received \".concat(res.status));\n\n              case 5:\n                _context7.next = 7;\n                return res.json();\n\n              case 7:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getResource(_x4) {\n        return _getResource.apply(this, arguments);\n      }\n\n      return getResource;\n    }()\n  }, {\n    key: \"_extractId\",\n    value: function _extractId(item) {\n      var idRegExp = /\\/([0-9]*)\\/$/;\n      return item.url.match(idRegExp)[1];\n    }\n  }]);\n\n  return SwapiService;\n}(); // const swapi = new SwapiService();\n// swapi.getAllPeople().then((people) => {\n//   // console.log(people);\n//   people.forEach((p) => {\n//     console.log(p.name);\n//   })\n// });\n//\n// swapi.getPerson(Math.floor(Math.random()*25)+2).then((p) => {\n//     console.log(\"Person\", p);\n// });\n//\n// swapi.getStarShip(Math.floor(Math.random()*25)+2).then((p) => {\n//     console.log(\"StarShip\", p);\n// });\n\n\nexport { SwapiService as default };","map":{"version":3,"sources":["/Users/elena/Documents/GA/REACT/star-db/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","getAllPeople","getResource","res","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarShip","getStarShip","starShip","_transformStarShip","_extractId","name","population","rotationPeriod","rotation_period","diameter","gender","birthYear","birth_year","eyeColor","eye_color","starship","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","url","fetch","ok","Error","status","json","item","idRegExp","match"],"mappings":"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","sourcesContent":["export default class SwapiService {\n  _apiBase = 'https://swapi.co/api';\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` + `, received ${res.status}`)\n    }\n    return await res.json();\n  }\n  getAllPeople = async() => {\n    const res = await this.getResource(`/people/`);\n    return res.results.map(this._transformPerson);;\n    // return res.results.map(this._transformPerson);\n  };\n  getPerson = async(id) => {\n    const person = await this.getResource(`/people/${id}/`);\n    return this._transformPerson(person);\n  };\n\n  getAllPlanets = async() => {\n    const res = await this.getResource(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  };\n  getPlanet = async(id) => {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  };\n\n  getAllStarShip = async() => {\n    const res = await this.getResource(`/starships/`);\n    return res.results;\n  }\n  getStarShip = async(id) => {\n    const starShip = await this.getResource(`/starships/${id}/`);\n    return this._transformStarShip(starShip);\n  }\n  _extractId (item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n  _transformPlanet = (planet) => {\n    return({\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    });\n  }\n\n  _transformPerson = (person) => {\n    return({\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color\n    });\n  }\n\n  _transformStarShip = (starship) => {\n    return({\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargo_capacity\n    });\n  }\n}\n// const swapi = new SwapiService();\n// swapi.getAllPeople().then((people) => {\n//   // console.log(people);\n//   people.forEach((p) => {\n//     console.log(p.name);\n//   })\n// });\n//\n// swapi.getPerson(Math.floor(Math.random()*25)+2).then((p) => {\n//     console.log(\"Person\", p);\n// });\n//\n// swapi.getStarShip(Math.floor(Math.random()*25)+2).then((p) => {\n//     console.log(\"StarShip\", p);\n// });\n"]},"metadata":{},"sourceType":"module"}