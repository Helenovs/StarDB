{"ast":null,"code":"import _regeneratorRuntime from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elena/Documents/GA/REACT/star-db/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar SwapiService =\n/*#__PURE__*/\nfunction () {\n  function SwapiService() {\n    var _this = this;\n\n    _classCallCheck(this, SwapiService);\n\n    this._apiBase = 'https://swapi.co/api';\n\n    this._transformPlanet = function (planet) {\n      return {\n        id: _this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n\n    this._transformPerson = function (person) {\n      return {\n        id: _this._extractId(person),\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birth_year,\n        eyeColor: person.eye_color\n      };\n    };\n\n    this._transformStarShip = function (starship) {\n      return {\n        id: _this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.cost_in_credits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargo_capacity\n      };\n    };\n  }\n\n  _createClass(SwapiService, [{\n    key: \"getResource\",\n    value: function () {\n      var _getResource = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(url) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"\".concat(this._apiBase).concat(url));\n\n              case 2:\n                res = _context.sent;\n\n                if (res.ok) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Could not fetch \".concat(url) + \", received \".concat(res.status));\n\n              case 5:\n                _context.next = 7;\n                return res.json();\n\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getResource(_x) {\n        return _getResource.apply(this, arguments);\n      }\n\n      return getResource;\n    }()\n  }, {\n    key: \"getAllPeople\",\n    value: function () {\n      var _getAllPeople = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getResource(\"/people/\");\n\n              case 2:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", res.results.map(this._transformPerson));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAllPeople() {\n        return _getAllPeople.apply(this, arguments);\n      }\n\n      return getAllPeople;\n    }()\n  }, {\n    key: \"getPerson\",\n    value: function () {\n      var _getPerson = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        var person;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getResource(\"/people/\".concat(id, \"/\"));\n\n              case 2:\n                person = _context3.sent;\n                return _context3.abrupt(\"return\", this._transformPerson(person));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getPerson(_x2) {\n        return _getPerson.apply(this, arguments);\n      }\n\n      return getPerson;\n    }()\n  }, {\n    key: \"getAllPlanets\",\n    value: function () {\n      var _getAllPlanets = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getResource(\"/planets/\");\n\n              case 2:\n                res = _context4.sent;\n                return _context4.abrupt(\"return\", res.results.map(this._transformPlanet));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getAllPlanets() {\n        return _getAllPlanets.apply(this, arguments);\n      }\n\n      return getAllPlanets;\n    }()\n  }, {\n    key: \"getPlanet\",\n    value: function () {\n      var _getPlanet = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        var planet;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getResource(\"/planets/\".concat(id, \"/\"));\n\n              case 2:\n                planet = _context5.sent;\n                return _context5.abrupt(\"return\", this._transformPlanet(planet));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getPlanet(_x3) {\n        return _getPlanet.apply(this, arguments);\n      }\n\n      return getPlanet;\n    }()\n  }, {\n    key: \"getAllStarShip\",\n    value: function () {\n      var _getAllStarShip = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.getResource(\"/starships/\");\n\n              case 2:\n                res = _context6.sent;\n                return _context6.abrupt(\"return\", res.results);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getAllStarShip() {\n        return _getAllStarShip.apply(this, arguments);\n      }\n\n      return getAllStarShip;\n    }()\n  }, {\n    key: \"getStarShip\",\n    value: function () {\n      var _getStarShip = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(id) {\n        var starShip;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.getResource(\"/starships/\".concat(id, \"/\"));\n\n              case 2:\n                starShip = _context7.sent;\n                return _context7.abrupt(\"return\", this._transformStarShip(starShip));\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getStarShip(_x4) {\n        return _getStarShip.apply(this, arguments);\n      }\n\n      return getStarShip;\n    }()\n  }, {\n    key: \"_extractId\",\n    value: function _extractId(item) {\n      var idRegExp = /\\/([0-9]*)\\/$/;\n      return item.url.match(idRegExp)[1];\n    }\n  }]);\n\n  return SwapiService;\n}(); // const swapi = new SwapiService();\n// swapi.getAllPeople().then((people) => {\n//   // console.log(people);\n//   people.forEach((p) => {\n//     console.log(p.name);\n//   })\n// });\n//\n// swapi.getPerson(Math.floor(Math.random()*25)+2).then((p) => {\n//     console.log(\"Person\", p);\n// });\n//\n// swapi.getStarShip(Math.floor(Math.random()*25)+2).then((p) => {\n//     console.log(\"StarShip\", p);\n// });\n\n\nexport { SwapiService as default };","map":{"version":3,"sources":["/Users/elena/Documents/GA/REACT/star-db/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","_transformPlanet","planet","id","_extractId","name","population","rotationPeriod","rotation_period","diameter","_transformPerson","person","gender","birthYear","birth_year","eyeColor","eye_color","_transformStarShip","starship","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","url","fetch","res","ok","Error","status","json","getResource","results","map","starShip","item","idRegExp","match"],"mappings":"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","sourcesContent":["export default class SwapiService {\n  _apiBase = 'https://swapi.co/api';\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` + `, received ${res.status}`)\n    }\n    return await res.json();\n  }\n  async getAllPeople(){\n    const res = await this.getResource(`/people/`);\n    return res.results.map(this._transformPerson);;\n    // return res.results.map(this._transformPerson);\n  }\n  async getPerson(id){\n    const person = await this.getResource(`/people/${id}/`);\n    return this._transformPerson(person);\n  }\n\n  async getAllPlanets(){\n    const res = await this.getResource(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n  async getPlanet(id){\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarShip(){\n    const res = await this.getResource(`/starships/`);\n    return res.results;\n  }\n  async getStarShip(id){\n    const starShip = await this.getResource(`/starships/${id}/`);\n    return this._transformStarShip(starShip);\n  }\n  _extractId (item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n  _transformPlanet = (planet) => {\n    return({\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    });\n  }\n\n  _transformPerson = (person) => {\n    return({\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color\n    });\n  }\n\n  _transformStarShip = (starship) => {\n    return({\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargo_capacity\n    });\n  }\n}\n// const swapi = new SwapiService();\n// swapi.getAllPeople().then((people) => {\n//   // console.log(people);\n//   people.forEach((p) => {\n//     console.log(p.name);\n//   })\n// });\n//\n// swapi.getPerson(Math.floor(Math.random()*25)+2).then((p) => {\n//     console.log(\"Person\", p);\n// });\n//\n// swapi.getStarShip(Math.floor(Math.random()*25)+2).then((p) => {\n//     console.log(\"StarShip\", p);\n// });\n"]},"metadata":{},"sourceType":"module"}